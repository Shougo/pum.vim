*pum.txt*	Original popup completion menu framework library

Version: 0.0
Author: Shougo <Shougo.Matsu at gmail.com>
License: MIT license

CONTENTS						*pum-contents*

Introduction		|pum-introduction|
Install			|pum-install|
Interface		|pum-interface|
  Variables		  |pum-variables|
  Options		  |pum-options|
  Functions		  |pum-functions|
  Key mappings		  |pum-key-mappings|
  Autocmds		  |pum-autocmds|
Examples		|pum-examples|
FAQ			|pum-faq|
Compatibility		|pum-compatibility|


==============================================================================
INTRODUCTION						*pum-introduction*

*pum* is the framework library to implement original popup menu completion.

It works both insert mode and command line mode.


==============================================================================
INSTALL							*pum-install*

Note: pum.vim requires Neovim (0.5.0+) or Vim8.2.1978+ (latest is
recommended).

pum.vim detects if "noice.nvim" is installed.

https://github.com/folke/noice.nvim


==============================================================================
INTERFACE						*pum-interface*

------------------------------------------------------------------------------
VARIABLES						*pum-variables*

						*g:pum#completed_item*
g:pum#completed_item
		It is inserted item like |v:completed_item|.
		It is used in |PumCompleteDone| event.

------------------------------------------------------------------------------
OPTIONS							*pum-options*

Options can be toggled through the use of |pum#set_option()|.
Note: The options must be set before call of |pum#open()|.

					*pum-options-auto_confirm_time*
auto_confirm_time
		If it is positive value, the inserted item is auto confirmed
		after you don't input.

		Default: 0

						*pum-options-auto_select*
auto_select
		Enable the auto selection of the first item.

		Default: v:true if 'completeopt' contains "noinsert"

							*pum-options-border*
border
		The completion window border.  You can specify border
		|nvim_open_win()| border option.
		Note: neovim only feature.  Vim's border feature is not
		stable.

		Default: "none"

						*pum-options-direction*
direction
		The popup menu direction if possible.
		Note: It does not work for command line mode.

		"above":  Above menu direction.
		"below":  Below menu dicrection.
		"auto":   Wider menu dicrection is used.

		Default: "auto"

					*pum-options-highlight_columns*
highlight_columns
		The columns highlights of candidates.
		The key is column name.
		The value is highlight name.

		Default: {}

				*pum-options-highlight_horizontal_menu*
highlight_horizontal_menu
		The highlight of the horizontal menu.
		|pum-options-horizontal_menu|

		Default: ""

				*pum-options-highlight_horizontal_separator*
highlight_horizontal_separator
		The highlight of the horizontal menu separator.
		|pum-options-horizontal_menu|

		Default: "PmenuSbar"

					*pum-options-highlight_matches*
highlight_matches
		The input matches highlight of candidates.

		Default: ""

					*pum-options-highlight_normal_menu*
highlight_normal_menu
		The highlight of the normal menu.

		Default: "Pmenu"

					*pum-options-highlight_scroll_bar*
highlight_scroll_bar
		The scrollbar highlight.
		Note: neovim only feature.

		Default: "PmenuSbar"

					*pum-options-highlight_selected*
highlight_selected
		The selected highlight of candidates.

		Default: "PmenuSel"

						*pum-options-horizontal_menu*
horizontal_menu
		Use horizontal menu instead of vertical popup menu.
		Note: The feature does not support custom highlights and
		columns.

		Default: v:false

						*pum-options-item_orders*
item_orders
		The column order of the item.
		Note: "abbr", "kind" and "menu" columns are from the item
		attribute.  Other columns are from the item's "columns"
		attribute.

		Default: ["abbr", "kind", "menu"]

						*pum-options-max_columns*
max_columns
		The column maximum width of the item.

		Default: #{ kind: 10, menu: 20 }

					*pum-options-max_horizontal_items*
max_horizontal_items
		The max items of the horizontal menu.
		|pum-options-horizontal_menu|

		Default: 3

						*pum-options-max_height*
max_height
		The maximum height of the popup menu.

		Default: 'pumheight' value

						*pum-options-max_width*
max_width
		The maximum width of the popup menu.

		Default: 0

						*pum-options-min_width*
min_width
		The minimum width of the popup menu.

		Default: 'pumwidth' value

						*pum-options-offset_cmdcol*
offset_cmdcol
		Popup col offset in the command line mode.

		Default: 0

						*pum-options-offset_cmdrow*
offset_cmdrow
		Popup row offset in the command line mode.

		Default:
			0 (neovim / Vim9+)
			1 (Vim8)

						*pum-options-offset_col*
offset_col
		Popup column offset if |pum-options-horizontal_menu|.

		Default: 3

						*pum-options-offset_row*
offset_row
		Popup row offset.

		Default: 0

							*pum-options-padding*
padding
		Enable left/right padding like native completion menu.

		Default: v:false

							*pum-options-reversed*
reversed
		Enable reversed mode.  The items order is reversed.

		Default: v:false

						*pum-options-scrollbar_char*
scrollbar_char
		Specify scrollbar character.
		Note: The scrollbar feature is disabled if it is empty string.
		Note: neovim only feature.

		Default: "|"

						*pum-options-use_complete*
use_complete
		Use |complete()| instead of |feedkeys()| when insertion.
		It is faster and does not break undo state.

		Note: If you insert the item, |CompleteDone| event is fired
		automatically.  It may break your plugins behavior.
		Note: It is for insert mode only.

		Default: v:false

						*pum-options-use_setline*
use_setline
		Use |setline()| instead of |feedkeys()| when insertion.
		It is faster but |.| repeat does not work.

		Note: It is for insert mode only.

		Default: v:false

					*pum-options-zindex*
zindex
		Popup window z-index.

		Default: 1000

------------------------------------------------------------------------------
FUNCTIONS						*pum-functions*

							*pum#close()*
pum#close()
		Close current popup menu.

							*pum#complete_info()*
pum#complete_info([{what}])
		Returns |Dictionary| like |complete_info()|.
		If {what} is supplied, then only the items listed in {what}
		are returned.

							*pum#entered()*
pum#entered()
		Returns |v:true| if you have selected or inserted popup menu.
		Note: It does not work for auto selection feature.

							*pum#get_pos()*
pum#get_pos()
		Returns like |pum_getpos()| result.

			height		window height
			width		window width
			row		screen position row (0 origin)
			col		screen position col (0 origin)
			size		total number of items
			scrollbar	v:false

							*pum#open()*
pum#open({startcol}, {items})
		Open popup menu like |complete()|.
		{startcol} is the byte offset in the line where the completed
		text start.
		Note: {startcol} is 1 origin like |col()|.
		{items} must be a |List|.  See |complete-items| for the kind
		of items.  You can use following special key.

			highlights:  Custom highlights.
				type	 "abbr" or "kind" or "menu"
				name	highlight name.  It is used for
					|prop_type_add()| in Vim.
					Note: It must be unique.
				hl_group	highlight group
				(|highlight-groups|)
				col	highlight start column (0 origin)
				width	highlight end column width
			Note: It is experimental feature.

		Note: If 'completeopt' contains "noinsert", the first item is
		selected automatically, but it increases screen flicker.

						*pum#set_local_option()*
pum#set_local_option({mode}, {option-name}, {value})
pum#set_local_option({mode}, {dict})
		Set {option-name} option to {value} for {mode}.
		You can specify {mode} from |mode()| or |getcmdtype()|.
		If {dict} is available, the key is {option-name} and the value
		is {value}. See |pum-options| for available {option-name}.

							*pum#set_option()*
pum#set_option({option-name}, {value})
pum#set_option({dict})
		Set {option-name} option to {value}.
		If {dict} is available, the key is {option-name} and the value
		is {value}. See |pum-options| for available {option-name}.

							*pum#skip_complete()*
pum#skip_complete()
		If it is |v:true|, auto completion plugin must be skipped auto
		completion.

							*pum#visible()*
pum#visible()
		Returns |v:true| if the popup menu is visible like
		|pumvisible()|.


------------------------------------------------------------------------------
KEY MAPPINGS						*pum-key-mappings*

							*pum#map#cancel()*
pum#map#cancel()
		Cancel the select and close the popup.
		Note: It must not be called in |:map-<expr>|.

							*pum#map#confirm()*
pum#map#confirm()
		Insert the select and close the popup.
		Note: It must not be called in |:map-<expr>|.

						*pum#map#confirm_word()*
pum#map#confirm_word()
		Insert the select word and close the popup.
		The word means non spaces charaters.
		It is useful if you want to complete word by word.
		Note: It must not be called in |:map-<expr>|.

						*pum#map#insert_relative()*
pum#map#insert_relative({delta}[, {overflow}])
		Move forward or backward {delta} number and insert the
		candidate.
		{overflow} is loop behavior when the cursor is overflowed.

			"empty": Insert empty text.  It is same with native
				completion behavior.
			"ignore": Ignore the cursor move.
			"loop": Move to the opposite item.  It is same with
				VSCode behavior.
			Default: "empty"

		Note: It must not be called in |:map-<expr>|.
		Note: It does not work in |:terminal|.

					*pum#map#insert_relative_page()*
pum#map#insert_relative_page({delta}[, {overflow}])
		Move forward or backward "{delta} * page height" number and
		insert the candidate.
		{overflow} is same with |pum#map#insert_relative()|.
		Note: It must not be called in |:map-<expr>|.
		Note: It does not work in |:terminal|.

						*pum#map#longest_relative()*
pum#map#longest_relative({delta}[, {overflow}])
		Insert the longest word.
		If the longest word is not found, it is same with
		|pum#map#insert_relative()|.
		The behavior is like "list:longest,full" in 'wildmode'.
		Note: It must not be called in |:map-<expr>|.

						*pum#map#select_relative()*
pum#map#select_relative({delta}[, {overflow}])
		Move forward or backward {delta} number and select the
		candidate.
		{overflow} is same with |pum#map#insert_relative()|.
		Note: It must not be called in |:map-<expr>|.

					*pum#map#select_relative_page()*
pum#map#select_relative_page({delta}[, {overflow}])
		Move forward or backward "{delta} * page height" number and
		select the candidate.
		{overflow} is same with |pum#map#insert_relative()|.
		Note: It must not be called in |:map-<expr>|.


------------------------------------------------------------------------------
AUTOCMDS						*pum-autocmds*

							*PumClose*
PumClose
		It is called before completion menu is closed.

							*PumCompleteChanged*
PumCompleteChanged
		After each time completion menu changed like
		|CompleteChanged|. |complete_info()| gives the information.

							*PumCompleteDone*
PumCompleteDone
		It is called after completion is done like |CompleteDone|.
		|g:pum#completed_item| gives the completed item.

		Note: When |v:completed_item| is not read only and insert
		mode, |CompleteDone| is also called.


==============================================================================
EXAMPLES						*pum-examples*
>
	inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
	inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
	inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
	inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
	inoremap <PageDown> <Cmd>call pum#map#insert_relative_page(+1)<CR>
	inoremap <PageUp>   <Cmd>call pum#map#insert_relative_page(-1)<CR>
<

==============================================================================
FREQUENTLY ASKED QUESTIONS (FAQ)			*pum-faq*

Q: How to donate money to you?

A: I have started github sponsorship to spend more time for Vim/neovim
plugins.  You can donate money to help me!

   https://github.com/sponsors/Shougo


Q: The popup menu does not close immediately in Vim.

A: It is the known issue of Vim.  |popup_close()| does not work immediately.


Q: The popup menu does not work in Command line window.

A: It is the limitation of Command line window.

Q: Auto import or auto snippet expansion does not work in pum.vim.

A: pum.vim does not support |CompleteDone| autocmd.  You need to emulate the
event like this.

Note: It is for ale plugin. >
	 autocmd User PumCompleteDone
	 \ call ale#completion#HandleUserData(g:pum#completed_item)

For vsnip plugin, you need to install "vim-vsnip-integ" plugin and please read
the documentation.
	https://github.com/hrsh7th/vim-vsnip-integ

Q: I want to use j/k keys to navigate popup menu when only entered popup menu.

A: >
	inoremap <expr> j   pum#entered() ?
	      \ '<Cmd> call pum#map#insert_relative(+1)<CR>' : 'j'
	inoremap <expr> k   pum#entered() ?
	      \ '<Cmd> call pum#map#insert_relative(-1)<CR>' : 'k'

Q: The popup window does not close when enter |command-line-window|.

A: In |command-line-window|, the popup window cannot be closed.  It is
Vim/neovim's feature.  The window is closed after you have leaved
|command-line-window|.

Q: I want to move to the first/last item by Home/End keys.

A: >
	inoremap <Home>
	\ <Cmd>call pum#map#insert_relative(-9999, 'ignore')<CR>
	inoremap <End>
	\ <Cmd>call pum#map#insert_relative(+9999, 'ignore')<CR>

==============================================================================
COMPATIBILITY						*pum-compatibility*

2023.05.22
* Rename "offset_row" option to "offset_cmdrow".

2022.11.18
* neovim 0.8 is required.

2022.09.10
* Rename "offset" option to "offset_row".

2022.09.08

* Remove "highlight_abbr", "highlight_kind" and "highlight_menu" options.
  Please use "highlight_columns" instead.


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
